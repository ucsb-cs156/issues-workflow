
name: 10-test
on:
  workflow_dispatch:
  
env:
  GH_TOKEN: ${{ github.token }}

permissions: write-all

#   contents: write
#   pages: write
#   id-token: write
#   issues: write
#   pull-requests: read  
  
jobs:
  set-things-up:
    runs-on: ubuntu-latest
    outputs:
      issue_filenames: ${{ steps.get-issue-filenames.outputs.issue_filenames }}
      open_issues: ${{ steps.get-open-issues.outputs.open_issues }}
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3
    - name: Create Label 
      run: |
        gh label create "auto" -f -d "This issue was created from a script" -c 909090

    - name: Get Issue Filenames
      id: get-issue-filenames
      run: |
        cd issues
        ls *.md > ../issue_filenames.tmp
        cd ..
        cat issue_filenames.tmp
        # files=`tr "[:space:]" " " < issue_filenames.tmp`
        # files=`echo $files | sed 's/ /, /g'`
        # files=`echo ${files%,*}${files##*,}`
        # files="[ ${files} ]"
        # echo "files=${files}"
        # echo "files=$files" >> "$GITHUB_OUTPUT"

        echo "[" > issue_filenames.json
        while read line; do
           echo \"$line\", >> issue_filenames.json
        done <issue_filenames.tmp
        echo "]" >> issue_filenames.json
        # Next line removes all whitespace; see: https://www.baeldung.com/linux/remove-whitespace-from-file
        s=`tr -d "[:space:]" < issue_filenames.json`
        # Next line removes last trailing comma; see: https://unix.stackexchange.com/a/187920
        issue_filenames=`echo ${s%,*}${s##*,}`
        echo "issue_filenames=${issue_filenames}" 
        echo "issue_filenames=${issue_filenames}" >> "$GITHUB_OUTPUT"
        ls $GITHUB_OUTPUT
        cat $GITHUB_OUTPUT
    - name: Get Open Issues
      id: get-open-issues
      run: |
        gh issue list --state OPEN --json number,title,body,state >> open_issues.json
        echo "open_issues.json contains:..."
        cat open_issues.json
        open_issues=`cat open_issues.json`
        if [[ "$open_issues" == "[]" ]]; then
           echo "open_issues=[]"
           echo "open_issues=[]" >> "$GITHUB_OUTPUT"
        else
           echo "open_issues=${open_issues}"
           echo "open_issues=${open_issues}" >> "$GITHUB_OUTPUT"
        fi
        echo "GITHUB_OUTPUT contains:..."
        cat $GITHUB_OUTPUT

  create-issue:
    name: Create issue from ${{ matrix.filename }}
    runs-on: ubuntu-latest
    needs: [set-things-up]

    strategy:
      matrix:
        # filename: [ issues/issue01.md ]
        filename: ${{ fromJSON(needs.set-things-up.outputs.issue_filenames) }}

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
  
    - name: Get title
      run: |
        title=`cat issues/${{ matrix.filename }} | head -n 1`
        echo "title=${title}" >> "$GITHUB_ENV"

    - name: Check if issues exists
      id: check-if-issue-exists
      run: |
        open_issues={{ needs.set-things-up.outputs.open_issues }}
        matching_issues=`echo $open_issues | jq 'map(select(.title == ${{ env.title }}))'`
        echo "matching_issues=${matching_issues}" >> "$GITHUB_ENV"
        if [ -z "$matching_issues" ]; then
          echo "No matching issues found"
          echo "issue_not_a_duplicate=${{ true }} >> "$GITHUB_ENV"
        else
          echo "Matching issues found"
          echo "$matching_issues"
          echo "issue_not_a_duplicate=${{ false }} >> "$GITHUB_ENV"
        fi
        cat $GITHUB_ENV
    
    - name: Create Issue From File
      id: create-issue
      uses: peter-evans/create-issue-from-file@v3
      if: ${{ env.issue_not_a_duplicate }}
      with:
        title: ${{ env.title }}
        content-filepath: issues/${{ matrix.filename }}
        label: "auto"

  # create-issue:
  #   name: Create issues
  #   runs-on: ubuntu-latest
  #   needs: [initialize]

  #   steps:
  #   - name: Checkout repo
  #     uses: actions/checkout@v3
  #     with:
  #       fetch-depth: 1
  #   - name: Loop over issue filenames
  #     run: |
  #       for f in ${{ needs.initialize.outputs.issue_filenames }}; do
  #         title = `cat $f | head -n 1`

  #       done

  #   - name: Create Issue From File
  #     id: step1
  #     uses: peter-evans/create-issue-from-file@v3
  #     with:
  #       title: ${title}
  #       content-filepath: ${{ matrix.filename }}
  #       label: "auto"



#     - name: Create Issue 1 From File
#       id: step1
#       uses: peter-evans/create-issue-from-file@v3
#       with:
#         title: Set up team deployments for prod and qa on Heroku, including Google OAuth setup
#         content-filepath: issues/issue00_set_up_deployment_on_heroku.md
#     - name: Add Issue 1 to Kanban board team03
#       uses: peter-evans/create-or-update-project-card@v1
#       with:
#         project-name: team03
#         column-name: Todo
#         issue-number: ${{ steps.step1.outputs.issue-number }}

